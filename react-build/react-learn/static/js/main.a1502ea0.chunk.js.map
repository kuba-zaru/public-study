{"version":3,"sources":["logo.svg","components/Basic.js","components/Basic2.js","components/R010Count.js","components/R020Array.js","components/R030Checkbox.js","context/AppContext.js","components/R040UseContextChild.js","components/R040UseContextParent.js","components/R100Filter.js","components/R100Input.js","components/R100TodoItem.js","components/R100Todo.js","components/R101TodoItem.js","components/R101Input.js","components/R101Filter.js","components/R101Todo.js","utils.js","components/R050UseReducer.js","components/R060RChild.js","components/R060RParent.js","components/R061RChild.js","components/R061RParent.js","components/R070css.js","App.js","reportWebVitals.js","index.js"],"names":["Basic","Basic2","R010Count","useState","cnt","setCnt","nm","cntOb","setCntOb","onClick","console","log","prevCnt","R020Array","cAry","setCAry","id","length","name","map","item","R030Checkbox","cId","setCId","checked","type","onChange","find","_item","chgCheck","AppContext","createContext","R040UseContextChild","useContext","msg01","msg02","R040UseContextParent","Provider","value","DispPoint","props","point","R100Filter","appState","dEditAppState","href","e","preventDefault","disp","R100Input","editTasks","placeholder","onKeyPress","key","_txt","target","order","txt","pressKey","DispTask","tasks","task","changeTask","toString","substr","R100TodoItem","filter","R100Todo","useReducer","currentState","action","_task","Date","getTime","_del_id","_uc_id","_uc_tasks","forEach","push","dEditTasks","result","R101TodoItem","className","done","classNames","text","R101Input","onAdd","React","setText","onKeyDown","R101Filter","handleClick","bind","R101Todo","getDymmyKey","Math","random","substring","items","setItems","setFilter","displayItems","handleCheck","newItems","getMyTimeStamp","date","getFullYear","getMonth","slice","getDate","getHours","getMinutes","getSeconds","getMilliseconds","R050UseReducer","valR","dispatchValR","valR2","dispatchValR2","timestamp","valR3","dispatchValR3","_date","valR4","dispatchValR4","valS2","setValS2","_val","prvCnt","addValS2","vr4","R060RChild","addVals","R060RParent","_time","vals","R061RChild","R061RParent","R070css","chk01","setChk01","handleChk01","circle","App","scrId","setScrId","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1502ea0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nconst Basic = () => {\r\n  return (\r\n    <div>\r\n      <p>Hello Basic World</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Basic;\r\n","import React from \"react\";\r\n\r\nconst Basic2 = () => {\r\n  return (\r\n    <div>\r\n      <p>Hello Basic2 World</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Basic2;\r\n","import React, { useState } from \"react\";\r\n\r\nconst R010Count = () => {\r\n  const [cnt, setCnt] = useState(0);\r\n  const [cntOb, setCntOb] = useState({ cnt: 0, nm: \"\" });\r\n\r\n  const doCnt = () => {\r\n    // countの更新\r\n    // number型を更新する\r\n    console.log(\"doCnt\");\r\n    setCnt((prevCnt) => prevCnt + 1);\r\n  };\r\n\r\n  const doCnt2 = () => {\r\n    // countの更新\r\n    // object型を更新する\r\n    console.log(\"doCnt\");\r\n    setCntOb({ ...cntOb, cnt: cntOb.cnt + 1 });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>商品をカウントする</p>\r\n      <button onClick={doCnt}>商品A {cnt}</button>\r\n      <button\r\n        onClick={() =>\r\n          setCntOb({\r\n            ...cntOb,\r\n            cnt: cntOb.cnt + 1,\r\n          })\r\n        }\r\n      >\r\n        商品B {cntOb.cnt}\r\n      </button>\r\n      <button onClick={doCnt2}>商品B {cntOb.cnt}</button>\r\n      {/* <button>商品B {cnt2.cnt}</button> */}\r\n      <p>合計：{cnt + cntOb.cnt}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R010Count;\r\n","import React, { useState } from \"react\";\r\n\r\nconst R020Array = () => {\r\n  const [cAry, setCAry] = useState([]);\r\n\r\n  const addAray = () => {\r\n    // 配列を追加する\r\n    console.log(\"addAray\");\r\n    // console.log(\"cAry.length\", cAry.length);\r\n    setCAry([\r\n      ...cAry,\r\n      {\r\n        id: cAry.length + 1,\r\n        name: \"Add Name\",\r\n      },\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>商品をカウントする</p>\r\n      <button onClick={addAray}>商品A</button>\r\n      {cAry.map((item) => (\r\n        <p key={item.id}>\r\n          abc {item.name} {item.id}\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R020Array;\r\n","import React, { useState } from \"react\";\r\n\r\nconst R030Checkbox = () => {\r\n  // チェックボックス配列\r\n  const [cAry, setCAry] = useState([]);\r\n  // チェックボックスID\r\n  const [cId, setCId] = useState(1);\r\n\r\n  // チェックボックスIDをAddする\r\n  const addCId = () => {\r\n    setCId((prevCnt) => prevCnt + 1);\r\n  };\r\n\r\n  // 配列を追加する\r\n  const addAray = () => {\r\n    console.log(\"addAray\");\r\n    setCAry([\r\n      ...cAry,\r\n      {\r\n        id: cId,\r\n        name: \"Add Name\",\r\n        checked: \"\",\r\n      },\r\n    ]);\r\n    addCId();\r\n  };\r\n\r\n  // チェックボックス変更\r\n  const chgCheck = (id) => {\r\n    console.log(\"chgCheck\", id);\r\n    // 対象のオブジェクトを取得する\r\n    const item = cAry.find((_item) => _item.id === id);\r\n    // checkedを付与する\r\n    if (item.checked === \"checked\") {\r\n      item.checked = \"\";\r\n    } else {\r\n      item.checked = \"checked\";\r\n    }\r\n    // チェックボックス配列を更新する\r\n    setCAry([...cAry]);\r\n  };\r\n\r\n  // 全件削除\r\n  const delAll = () => {\r\n    console.log(\"delAray\");\r\n    setCAry([]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>商品を追加する</p>\r\n      <button onClick={addAray}>商品A</button>\r\n      <button onClick={delAll}>全件削除</button>\r\n\r\n      {/* 商品一覧 */}\r\n      {cAry.map((item) => (\r\n        <p key={item.id}>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={() => chgCheck(item.id)}\r\n            checked={item.checked}\r\n          ></input>\r\n          {item.name} {item.id}\r\n        </p>\r\n      ))}\r\n      {/* <div>\r\n        <img\r\n          src=\"https://media.giphy.com/media/33OrjzUFwkwEg/giphy.gif\"\r\n          alt=\"\"\r\n        />\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R030Checkbox;\r\n","import { createContext } from \"react\";\r\n\r\nconst AppContext = createContext();\r\n\r\nexport default AppContext;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\n\r\nconst R040UseContextChild = () => {\r\n  // useContextを使用してstateを取得する\r\n  const { msg01, msg02 } = useContext(AppContext);\r\n\r\n  return (\r\n    <div>\r\n      <p>R040UseContextChild.js</p>\r\n      {/* stateを使用する */}\r\n      <p>{msg01}</p>\r\n      <p>{msg02}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R040UseContextChild;\r\n","import React from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\nimport R040UseContextChild from \"./R040UseContextChild\";\r\n\r\nconst R040UseContextParent = () => {\r\n  return (\r\n    <div>\r\n      <p>R040UseContextParent.js</p>\r\n\r\n      {/* useContextを使用する為に〇〇.Providerタグで囲む */}\r\n      <AppContext.Provider value={{ msg01: \"message01\", msg02: \"message02\" }}>\r\n        <R040UseContextChild />\r\n      </AppContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R040UseContextParent;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\n\r\n/**\r\n * filter\r\n */\r\nconst R100Filter = () => {\r\n  // useContext\r\n  const { appState, dEditAppState } = useContext(AppContext);\r\n\r\n  const clickAll = (e) => {\r\n    console.log(\"clickAll\");\r\n    // デフォルトのイベントをキャンセルする\r\n    e.preventDefault();\r\n    // 表示モードを更新する\r\n    dEditAppState({ disp: \"all\" });\r\n    // TODO: ラベルを更新する\r\n  };\r\n\r\n  const clickTodo = (e) => {\r\n    console.log(\"clickTodo\");\r\n    // デフォルトのイベントをキャンセルする\r\n    e.preventDefault();\r\n    // 表示モードを更新する\r\n    dEditAppState({ disp: \"todo\" });\r\n    // TODO: ラベルを更新する\r\n  };\r\n\r\n  const clickDone = (e) => {\r\n    console.log(\"clickDone\");\r\n    // デフォルトのイベントをキャンセルする\r\n    e.preventDefault();\r\n    // 表示モードを更新する\r\n    dEditAppState({ disp: \"done\" });\r\n    // TODO: ラベルを更新する\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <p>R100Filter.js</p> */}\r\n      <a href=\"/\" onClick={clickAll}>\r\n        {appState.disp === \"all\" && <DispPoint point={\"point1\"} />} All\r\n      </a>\r\n      &nbsp;&nbsp;\r\n      <a href=\"/\" onClick={clickTodo}>\r\n        {appState.disp === \"todo\" && <DispPoint point={\"point1\"} />} Todo\r\n      </a>\r\n      &nbsp;&nbsp;\r\n      <a href=\"/\" onClick={clickDone}>\r\n        {appState.disp === \"done\" && <DispPoint point={\"point1\"} />} Done\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * 点を出力する\r\n * @param {*} props\r\n */\r\nconst DispPoint = (props) => {\r\n  const point = props.point;\r\n  return (\r\n    <>\r\n      {point === \"point1\" && <span>★</span>}\r\n      {point === \"point2\" && <span>●</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default R100Filter;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\n\r\n/**\r\n * 入力部分\r\n * @param {*} props\r\n */\r\nconst R100Input = (props) => {\r\n  // useContext\r\n  const { editTasks } = useContext(AppContext);\r\n\r\n  /**\r\n   * reset\r\n   */\r\n  const resetTask = () => {\r\n    // console.log(\"btnClick\");\r\n    editTasks({ order: \"reset\" });\r\n  };\r\n\r\n  /**\r\n   * press key\r\n   * @param {event} e\r\n   */\r\n  const pressKey = (e) => {\r\n    // enter\r\n    if (e.key === \"Enter\") {\r\n      // console.log(e.key);\r\n      // デフォルトのkeyイベントをキャンセルする\r\n      e.preventDefault();\r\n      // textを取得する\r\n      const _txt = e.target.value;\r\n      // todosにAddする\r\n      editTasks({ order: \"add\", txt: _txt });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * task 1件追加\r\n   * デフォルト値で追加する\r\n   */\r\n  const addTask = () => {\r\n    editTasks({ order: \"add\" });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* <p>R100Input.js</p> */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter to Add\"\r\n        onKeyPress={(e) => pressKey(e)}\r\n      />\r\n      <button onClick={addTask}>add hoge</button>\r\n      <button onClick={resetTask}>reset</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R100Input;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\n\r\n/**\r\n * 一覧\r\n */\r\nconst R100TodoItem = () => {\r\n  // useContext\r\n  const { appState, tasks } = useContext(AppContext);\r\n\r\n  return (\r\n    <div>\r\n      {/* <p>R100TodoItem.js</p> */}\r\n      <ul>\r\n        {appState.disp === \"all\" && <DispTask tasks={tasks} />}\r\n        {appState.disp === \"todo\" && (\r\n          <DispTask\r\n            tasks={tasks.filter((item) => item.checked !== \"checked\")}\r\n          />\r\n        )}\r\n        {appState.disp === \"done\" && (\r\n          <DispTask\r\n            tasks={tasks.filter((item) => item.checked === \"checked\")}\r\n          />\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * 一覧\r\n * @param {*} props\r\n */\r\nconst DispTask = (props) => {\r\n  const tasks = props.tasks;\r\n  const { editTasks } = useContext(AppContext);\r\n\r\n  /**\r\n   * taskをチェックする\r\n   * @param {*} e\r\n   * @param {*} id\r\n   */\r\n  const changeTask = (e, id) => {\r\n    console.log(\"clickTask\", id);\r\n    // taskにチェックを付与する\r\n    if (e.target.checked) {\r\n      editTasks({ order: \"checked\", id: id });\r\n    } else {\r\n      editTasks({ order: \"unchecked\", id: id });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * taskを削除する\r\n   * @param {*} id\r\n   */\r\n  const delTask = (id) => {\r\n    console.log(\"delTask\");\r\n    // delete\r\n    editTasks({ order: \"del\", id: id });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {tasks.map((task) => (\r\n        <li key={task.id}>\r\n          <input\r\n            type=\"checkbox\"\r\n            onChange={(e) => changeTask(e, task.id)}\r\n            checked={task.checked}\r\n          />\r\n          {task.id.toString().substr(7)} {task.txt} &nbsp;\r\n          <button onClick={() => delTask(task.id)}>Del</button>&nbsp;\r\n        </li>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default R100TodoItem;\r\n","import React, { useReducer } from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\nimport R100Filter from \"./R100Filter\";\r\nimport R100Input from \"./R100Input\";\r\nimport R100TodoItem from \"./R100TodoItem\";\r\n\r\n/**\r\n * todoリスト全体\r\n */\r\nconst R100Todo = () => {\r\n  /**\r\n   * tasksの更新\r\n   * @param {*} currentState\r\n   * @param {*} action\r\n   */\r\n  const rEdittasks = (currentState, action) => {\r\n    console.log(\"rEdittasks start...\", action.order);\r\n\r\n    switch (action.order) {\r\n      case \"reset\":\r\n        // taskを初期化する\r\n        return [];\r\n\r\n      case \"add\":\r\n        // taskを追加する\r\n        // timestampを取得する\r\n        const _time = new Date().getTime();\r\n        // textを取得する\r\n        const _txt = action.txt ? action.txt : \"hoge\";\r\n        // taskを作成する\r\n        const _task = { id: _time, txt: _txt, checked: \"\" };\r\n        // tasksにaddする\r\n        const _tasks = [...currentState, _task];\r\n        // return\r\n        return _tasks;\r\n\r\n      case \"del\":\r\n        // taskを1件削除する\r\n        const _del_id = action.id;\r\n        const _del_tasks = currentState.filter((item) => item.id !== _del_id);\r\n        return _del_tasks;\r\n\r\n      case \"checked\":\r\n      case \"unchecked\":\r\n        // チェックを更新する\r\n        const _uc_id = action.id;\r\n        // 対象のtaskを取得し、checkedを更新する\r\n        const _uc_task = currentState.find((item) => item.id === _uc_id);\r\n        _uc_task.checked = action.order === \"checked\" ? \"checked\" : \"\";\r\n        // task全体を更新し、再レンダリングする\r\n        const _uc_tasks = [];\r\n        currentState.forEach((item) => {\r\n          _uc_tasks.push(item);\r\n        });\r\n        return _uc_tasks;\r\n\r\n      default:\r\n        // default 処理無し\r\n        return currentState;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * appStateの更新\r\n   * @param {*} currentState\r\n   * @param {*} action\r\n   */\r\n  const rEditAppState = (currentState, action) => {\r\n    console.log(\"rEditAppState start...\", action);\r\n    const result = { disp: currentState.disp };\r\n    result.disp = action.disp ? action.disp : result.disp;\r\n    return result;\r\n  };\r\n\r\n  // reducer\r\n  const [tasks, dEditTasks] = useReducer(rEdittasks, [\r\n    { id: 100000001, txt: \"test1\", checked: \"\" },\r\n    { id: 100000002, txt: \"test2\", checked: \"\" },\r\n    { id: 100000003, txt: \"test3\", checked: \"\" },\r\n  ]);\r\n  const [appState, dEditAppState] = useReducer(rEditAppState, { disp: \"all\" });\r\n\r\n  return (\r\n    <div>\r\n      <p>Item {tasks.length}</p>\r\n      {/* <p>disp {appState.disp}</p> */}\r\n      <AppContext.Provider\r\n        value={{\r\n          appState: appState,\r\n          dEditAppState: dEditAppState,\r\n          tasks: tasks,\r\n          editTasks: dEditTasks,\r\n        }}\r\n      >\r\n        <R100Input />\r\n        <R100Filter />\r\n        <R100TodoItem />\r\n      </AppContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R100Todo;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\n/**\r\n * タスクを表示する\r\n * @param {*} props\r\n */\r\nconst R101TodoItem = (props) => {\r\n  // task 1件\r\n  const item = props.item;\r\n  // チェックボックス更新function\r\n  const onChange = props.onChange;\r\n\r\n  /**\r\n   * タスクの完了状態を切り替える\r\n   * チェックボックスを更新する\r\n   */\r\n  const handleChange = () => {\r\n    onChange(item);\r\n  };\r\n\r\n  return (\r\n    <label className=\"panel-block\">\r\n      <input type=\"checkbox\" checked={item.done} onChange={handleChange} />\r\n      {/* {item.text} に CSS クラスを適用させるために <span> で囲ったうえで\r\n        classnames ライブラリを利用しています。 */}\r\n      <span\r\n        className={classNames({\r\n          \"has-text-info\": item.done,\r\n        })}\r\n      >\r\n        {item.text}\r\n      </span>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default R101TodoItem;\r\n","import React from \"react\";\r\n\r\nconst R101Input = (props) => {\r\n  // task 1件追加function\r\n  const onAdd = props.onAdd;\r\n  const [text, setText] = React.useState(\"\");\r\n\r\n  /**\r\n   * text更新\r\n   * @param {*} e\r\n   */\r\n  const handleChange = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  /**\r\n   * Enterボタンを押下した場合はtaskを1件addする\r\n   * @param {*} e\r\n   */\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      onAdd(text);\r\n      setText(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"panel-block\">\r\n      {/* <p>R101Input.js</p> */}\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        placeholder=\"Enter to add\"\r\n        value={text}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R101Input;\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\n/**\r\n * filter\r\n * @param {*} props\r\n */\r\nconst R101Filter = (props) => {\r\n  const value = props.value;\r\n  const onChange = props.onChange;\r\n\r\n  /**\r\n   * Filterクリック\r\n   * @param {*} key\r\n   * @param {*} e\r\n   */\r\n  const handleClick = (key, e) => {\r\n    e.preventDefault();\r\n    onChange(key);\r\n  };\r\n\r\n  return (\r\n    <div className=\"panel-tabs\">\r\n      {/* bindを使用してイベントハンドラに引数を渡す。 */}\r\n      {/* アロー関数でもOK 下記の記述も同様の結果となる。 */}\r\n      {/* <Comp onSomething={() => doSomething(123)} /> */}\r\n      <a\r\n        href=\"/\"\r\n        onClick={handleClick.bind(null, \"ALL\")}\r\n        className={classNames(\r\n          { \"is-active\": value === \"ALL\" },\r\n          { \"has-background-white-ter\": value === \"ALL\" }\r\n        )}\r\n      >\r\n        ALL\r\n      </a>\r\n      <a\r\n        href=\"/\"\r\n        onClick={handleClick.bind(null, \"TODO\")}\r\n        className={classNames(\r\n          { \"is-active\": value === \"TODO\" },\r\n          { \"has-background-white-ter\": value === \"TODO\" }\r\n        )}\r\n      >\r\n        Todo\r\n      </a>\r\n      <a\r\n        href=\"/\"\r\n        onClick={handleClick.bind(null, \"DONE\")}\r\n        className={classNames(\r\n          { \"is-active\": value === \"DONE\" },\r\n          { \"has-background-white-ter\": value === \"DONE\" }\r\n        )}\r\n      >\r\n        Done\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R101Filter;\r\n","import \"../bulma.min.css\";\r\nimport React, { useState } from \"react\";\r\nimport R101TodoItem from \"./R101TodoItem\";\r\nimport R101Input from \"./R101Input\";\r\nimport R101Filter from \"./R101Filter\";\r\n\r\nconst R101Todo = () => {\r\n  /**\r\n   * ランダムな値を生成する\r\n   * @return ランダムな値\r\n   */\r\n  const getDymmyKey = () => {\r\n    return Math.random().toString(32).substring(2);\r\n  };\r\n\r\n  // tasks\r\n  const [items, setItems] = useState([\r\n    { key: getDymmyKey(), text: \"from Hypertext Candy\", done: false },\r\n    { key: getDymmyKey(), text: \"Learn React\", done: false },\r\n    { key: getDymmyKey(), text: \"Learn JavaScript\", done: false },\r\n  ]);\r\n\r\n  // filter\r\n  const [filter, setFilter] = React.useState(\"ALL\");\r\n\r\n  // 表示用のtasks フィルタリング後のlistを返却する\r\n  // なぜかitemsに変更がある場合に自動的に呼ばれる\r\n  const displayItems = items.filter((item) => {\r\n    console.log(\"displayItems\");\r\n    if (filter === \"ALL\") return true;\r\n    if (filter === \"TODO\") return !item.done;\r\n    if (filter === \"DONE\") return item.done;\r\n    return true;\r\n  });\r\n\r\n  /**\r\n   * 対象のkeyのdoneを反転させる\r\n   * チェックボックスを更新する\r\n   * @param {*} checked\r\n   */\r\n  const handleCheck = (checked) => {\r\n    const newItems = items.map((item) => {\r\n      // 対象のkeyのdoneの真偽を反転させる\r\n      if (item.key === checked.key) {\r\n        item.done = !item.done;\r\n      }\r\n      return item;\r\n    });\r\n    setItems(newItems);\r\n  };\r\n\r\n  /**\r\n   * taskを追加する\r\n   * @param {*} text\r\n   */\r\n  const handleAdd = (text) => {\r\n    setItems([...items, { key: getDymmyKey(), text, done: false }]);\r\n  };\r\n\r\n  /**\r\n   * filterを更新する\r\n   * @param {*} value\r\n   */\r\n  const handleFilterChange = (value) => {\r\n    setFilter(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container is-fluid\">\r\n      <div className=\"panel\">\r\n        <div className=\"panel-heading \">⚛️ React Todo App</div>\r\n        <R101Input onAdd={handleAdd} />\r\n        <R101Filter onChange={handleFilterChange} value={filter} />\r\n\r\n        {displayItems.map((item) => (\r\n          <R101TodoItem key={item.key} item={item} onChange={handleCheck} />\r\n        ))}\r\n        <div className=\"panel-block\">{items.length} items</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R101Todo;\r\n","/**\r\n * timestampを返却する yyyy/mm/dd/ hh:mm.sss\r\n */\r\nconst getMyTimeStamp = () => {\r\n  const date = new Date();\r\n  const _yyyymmddhhmmss =\r\n    date.getFullYear() +\r\n    \"/\" +\r\n    (\"0\" + (date.getMonth() + 1)).slice(-2) +\r\n    \"/\" +\r\n    (\"0\" + date.getDate()).slice(-2) +\r\n    \" \" +\r\n    (\"0\" + date.getHours()).slice(-2) +\r\n    \":\" +\r\n    (\"0\" + date.getMinutes()).slice(-2) +\r\n    \":\" +\r\n    (\"0\" + date.getSeconds()).slice(-2) +\r\n    \".\" +\r\n    date.getMilliseconds();\r\n  return _yyyymmddhhmmss;\r\n};\r\n\r\nexport default getMyTimeStamp;\r\n","import React, { useState, useReducer } from \"react\";\r\nimport getMyTimeStamp from \"../utils\";\r\n\r\n/**\r\n * useReducer\r\n */\r\nconst R050UseReducer = () => {\r\n  // reducerを更新する\r\n  // 基本形\r\n  const reducerValR = (currentState, action) => {\r\n    console.log(\"reducerValR start...\");\r\n    switch (action) {\r\n      case \"add\":\r\n        return currentState + 1;\r\n      default:\r\n        return currentState;\r\n    }\r\n  };\r\n\r\n  // reducerを更新する\r\n  // stateとreducerを同期する\r\n  const reducerValR2 = (currentState, action) => {\r\n    console.log(\"reducerValR2 start...\");\r\n    console.log(\"currentState\", currentState);\r\n    console.log(\"action\", action);\r\n    return action;\r\n  };\r\n\r\n  // reducerを更新する\r\n  // オブジェクトを更新する\r\n  const reducerValR3 = (currentState, action) => {\r\n    console.log(\"reducerValR3 start...\");\r\n    // timestampを取得する\r\n    const _yyyymmddhhmmss = getMyTimeStamp();\r\n    const _obj = { id: 1, timestamp: _yyyymmddhhmmss };\r\n    currentState = _obj;\r\n    return currentState;\r\n  };\r\n\r\n  // reducerを更新する\r\n  // オブジェクト配列を更新する\r\n  const reducerValR4 = (currentState, action) => {\r\n    console.log(\"reducerValR4 start...\");\r\n    // console.log(\"currentState\", currentState);\r\n    // timestampを取得する\r\n    const _date = new Date();\r\n    // objectを作成する\r\n    const items = [...currentState, { id: _date.getTime() }];\r\n\r\n    return items;\r\n  };\r\n\r\n  // reducer\r\n  const [valR, dispatchValR] = useReducer(reducerValR, 0);\r\n  const [valR2, dispatchValR2] = useReducer(reducerValR2, 0);\r\n  const [valR3, dispatchValR3] = useReducer(reducerValR3, {});\r\n  const [valR4, dispatchValR4] = useReducer(reducerValR4, []);\r\n\r\n  // useState\r\n  const [valS2, setValS2] = useState(0);\r\n\r\n  // useStateを更新する\r\n  const addValS2 = () => {\r\n    console.log(\"addValS2 start...\");\r\n    let _val = valS2 + 1;\r\n    console.log(\"_val\", _val);\r\n    setValS2((prvCnt) => {\r\n      console.log(\"setValS2 start...\");\r\n      console.log(\"prvCnt\", prvCnt);\r\n      return _val;\r\n    });\r\n    // let _val = valS2 + 1;\r\n    dispatchValR2(_val);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>R050UseReducer.js</p>\r\n\r\n      <p>reducer基本</p>\r\n      <button onClick={() => dispatchValR(\"add\")}>valR {valR}</button>\r\n\r\n      <p>reducerとstateの値を同期させる</p>\r\n      <button onClick={() => addValS2()}>\r\n        valS2 {valS2} valR2 {valR2}\r\n      </button>\r\n\r\n      <p>reducerがオブジェクトの場合</p>\r\n      <button onClick={() => dispatchValR3()}>valR3 {valR3.timestamp}</button>\r\n\r\n      <p>reducerがオブジェクト配列の場合</p>\r\n      <button onClick={() => dispatchValR4()}>valR4</button>\r\n      {valR4.map((vr4) => (\r\n        <p key={vr4.id}>{vr4.id}</p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R050UseReducer;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\n\r\nconst R060RChild = () => {\r\n  // useContextを取得できる\r\n  const { addVals } = useContext(AppContext);\r\n\r\n  return (\r\n    <div>\r\n      <p>R060RChild.js</p>\r\n      <button onClick={() => addVals()}>valR4</button>\r\n      <button onClick={() => addVals(\"reset\")}>reset</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R060RChild;\r\n","import React, { useReducer } from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\nimport R060RChild from \"./R060RChild\";\r\n// import getMyTimeStamp from \"../utils\";\r\n\r\n/**\r\n * useReduserとuseContextを組み合わせる\r\n */\r\nconst R060RParent = () => {\r\n  // reducerを更新する\r\n  // オブジェクト配列を更新する\r\n  const reducerValR4 = (currentState, action) => {\r\n    console.log(\"reducerValR4 start...\");\r\n\r\n    if (action === \"reset\") {\r\n      return [];\r\n    }\r\n    // timestampを取得する\r\n    const _time = new Date().getTime();\r\n    // objectを作成する\r\n    const items = [...currentState, { id: _time }];\r\n    return items;\r\n  };\r\n\r\n  // reducer\r\n  const [valR4, dispatchValR4] = useReducer(reducerValR4, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>R060RParent.js</p>\r\n\r\n      <p>useReduserとuseContextを組み合わせる</p>\r\n      {/* <button onClick={() => dispatchValR4()}>valR4</button> */}\r\n      <AppContext.Provider value={{ vals: valR4, addVals: dispatchValR4 }}>\r\n        <R060RChild />\r\n      </AppContext.Provider>\r\n      {valR4.map((vr4) => (\r\n        <p key={vr4.id}>{vr4.id}</p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R060RParent;\r\n","import React, { useContext } from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\n\r\nconst R061RChild = () => {\r\n  // useContextを取得できる\r\n  const { addVals } = useContext(AppContext);\r\n\r\n  return (\r\n    <div>\r\n      <p>R061RChild.js</p>\r\n      <button onClick={() => addVals({ order: \"add\", txt: \"abc\" })}>\r\n        valR4\r\n      </button>\r\n      <button onClick={() => addVals({ order: \"reset\" })}>reset</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R061RChild;\r\n","import React, { useReducer } from \"react\";\r\nimport AppContext from \"../context/AppContext\";\r\nimport R061RChild from \"./R061RChild\";\r\n// import getMyTimeStamp from \"../utils\";\r\n\r\n/**\r\n * useReduserとuseContextを組み合わせる\r\n */\r\nconst R061RParent = () => {\r\n  /**\r\n   * reducerを更新する\r\n   * @param {*} currentState\r\n   * @param {*} action\r\n   */\r\n  const reducerValR4 = (currentState, action) => {\r\n    console.log(\"reducerValR4 start...\");\r\n    console.log(\"action\", action);\r\n\r\n    if (action.order === \"reset\") {\r\n      return [];\r\n    }\r\n    // timestampを取得する\r\n    const _time = new Date().getTime();\r\n    // objectを作成する\r\n    const items = [...currentState, { id: _time, txt: action.txt }];\r\n    return items;\r\n  };\r\n\r\n  // reducer\r\n  const [valR4, dispatchValR4] = useReducer(reducerValR4, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>R061RParent.js</p>\r\n\r\n      <p>useReduserとuseContextを組み合わせる</p>\r\n      <p>reducerのactionにオブジェクトを指定する</p>\r\n      <AppContext.Provider value={{ vals: valR4, addVals: dispatchValR4 }}>\r\n        <R061RChild />\r\n      </AppContext.Provider>\r\n      {valR4.map((vr4) => (\r\n        <p key={vr4.id}>\r\n          {vr4.id} {vr4.txt}\r\n        </p>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R061RParent;\r\n","import React, { useState } from \"react\";\r\nimport \"./R070css.css\";\r\nimport classNames from \"classnames\";\r\n\r\n/**\r\n * cssの付与\r\n */\r\nconst R070css = () => {\r\n  // checkbox01\r\n  const [chk01, setChk01] = useState(false);\r\n  // checkbox01 change\r\n  const handleChk01 = () => setChk01(!chk01);\r\n\r\n  return (\r\n    <div>\r\n      {/* <p>R070css.js</p> */}\r\n      <div className=\"f-container\">\r\n        <h1>クリックでクラスを付与する</h1>\r\n      </div>\r\n      <div className=\"f-container\">\r\n        <input type=\"checkbox\" checked={chk01} onChange={handleChk01} />\r\n        <div\r\n          className={classNames(\"box\", {\r\n            circle: chk01,\r\n          })}\r\n          onClick={handleChk01}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default R070css;\r\n","import logo from \"./logo.svg\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Basic from \"./components/Basic\";\nimport Basic2 from \"./components/Basic2\";\nimport R010Count from \"./components/R010Count\";\nimport R020Array from \"./components/R020Array\";\nimport R030Checkbox from \"./components/R030Checkbox\";\nimport R040UseContextParent from \"./components/R040UseContextParent\";\nimport R100Todo from \"./components/R100Todo\";\nimport R101Todo from \"./components/R101Todo\";\nimport R050UseReducer from \"./components/R050UseReducer\";\nimport R060RParent from \"./components/R060RParent\";\nimport R061RParent from \"./components/R061RParent\";\nimport R070css from \"./components/R070css\";\n\nfunction App() {\n  // 画面\n  const [scrId, setScrId] = useState(70);\n  // 画面ID List\n  const scrIds = [10, 20, 30, 40, 50, 60, 61, 70, 80, 90, 100, 101, 110, 111];\n\n  // 画面切り替え\n  const chgScr = (id) => {\n    // console.log(\"click !!\");\n    setScrId(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n\n      {/* button */}\n      {scrIds.map((value) => (\n        <button key={value} onClick={() => chgScr(value)}>\n          src{value}\n        </button>\n      ))}\n\n      <h2>scrId = {scrId}</h2>\n      <hr />\n\n      {scrId === 10 && <R010Count />}\n      {scrId === 20 && <R020Array />}\n      {scrId === 30 && <R030Checkbox />}\n      {scrId === 40 && <R040UseContextParent />}\n      {scrId === 50 && <R050UseReducer />}\n      {scrId === 60 && <R060RParent />}\n      {scrId === 61 && <R061RParent />}\n      {scrId === 70 && <R070css />}\n\n      {scrId === 100 && <R100Todo />}\n      {scrId === 101 && <R101Todo />}\n\n      {scrId === 110 && <Basic />}\n      {scrId === 111 && <Basic2 />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}